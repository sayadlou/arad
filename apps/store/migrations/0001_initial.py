# Generated by Django 3.2.12 on 2022-04-15 10:07

import datetime
from django.conf import settings
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import django_jalali.db.models
import mptt.fields
import pathlib
import tinymce.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('W', 'Pending'), ('T', 'Transferred'), ('F', 'Failed')], default='W', max_length=20)),
                ('status_change_date', models.DateTimeField(auto_now_add=True)),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cart',
                'verbose_name_plural': 'Carts',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('W', 'Waiting'), ('T', 'Transferred'), ('P', 'Payed'), ('F', 'Failed')], default='W', max_length=20)),
                ('status_change_date', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Order',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ProductBaseModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(allow_unicode=True, unique=True)),
                ('price', models.DecimalField(decimal_places=0, max_digits=12)),
                ('max_order_quantity', models.DecimalField(decimal_places=0, max_digits=12)),
                ('min_order_quantity', models.DecimalField(decimal_places=0, max_digits=12)),
                ('purchaser', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VideoFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('arvan_id', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='store.servicecategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('expired_at', models.DateTimeField(blank=True, null=True, verbose_name='expired at')),
                ('due_at', models.DateTimeField(blank=True, null=True, verbose_name='due at')),
                ('fulfilled_at', models.DateTimeField(blank=True, null=True, verbose_name='fulfilled at')),
                ('amount', models.PositiveIntegerField(default=0, verbose_name='amount')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'initial'), (2, 'processing'), (3, 'confirmed')], default=2, verbose_name='status')),
                ('status_change_date', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.order', verbose_name='order')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='quantity')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.order', verbose_name='order item')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.productbasemodel')),
            ],
            options={
                'verbose_name': 'Order item',
                'verbose_name_plural': 'Order items',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='LearningCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='store.learningcategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='store.eventcategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='quantity')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.cart', verbose_name='cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.productbasemodel')),
            ],
            options={
                'verbose_name': 'Cart item',
                'verbose_name_plural': 'Cart items',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('productbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.productbasemodel')),
                ('status', models.CharField(choices=[('Published', 'Published'), ('Draft', 'Draft'), ('Trash', 'Trash')], max_length=50)),
                ('pub_date', django_jalali.db.models.jDateTimeField(verbose_name='Date')),
                ('picture', models.ImageField(upload_to='event/picture')),
                ('seo_tag', models.CharField(max_length=200)),
                ('description', tinymce.models.HTMLField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.servicecategory')),
            ],
            bases=('store.productbasemodel',),
        ),
        migrations.CreateModel(
            name='LearningPost',
            fields=[
                ('productbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.productbasemodel')),
                ('content', tinymce.models.HTMLField()),
                ('status', models.CharField(choices=[('Published', 'Published'), ('Draft', 'Draft'), ('Trash', 'Trash')], max_length=50)),
                ('view', models.BigIntegerField(blank=True, default=0, null=True)),
                ('tags', models.CharField(max_length=200)),
                ('pub_date', models.DateField(default=datetime.date.today, verbose_name='Date')),
                ('picture', models.ImageField(upload_to='learning/picture')),
                ('attachment', models.FileField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/attachment/', location=pathlib.PurePosixPath('/home/saeid/arad/learning_attachments')), upload_to='')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.learningcategory')),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='store.videofile')),
            ],
            bases=('store.productbasemodel',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('productbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.productbasemodel')),
                ('status', models.CharField(choices=[('Published', 'Published'), ('Draft', 'Draft'), ('Trash', 'Trash')], max_length=50)),
                ('pub_date', django_jalali.db.models.jDateTimeField(verbose_name='Date')),
                ('picture', models.ImageField(upload_to='event/picture')),
                ('seo_tag', models.CharField(max_length=200)),
                ('start_date', django_jalali.db.models.jDateTimeField()),
                ('end_date', django_jalali.db.models.jDateTimeField()),
                ('duration', models.IntegerField()),
                ('join_link', models.URLField(max_length=128)),
                ('description', tinymce.models.HTMLField()),
                ('policy', tinymce.models.HTMLField()),
                ('organizer_mobile_number', models.CharField(default='00989354356804', max_length=20, verbose_name='mobile')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.eventcategory')),
            ],
            bases=('store.productbasemodel',),
        ),
    ]
